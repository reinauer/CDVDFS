# $Id: mmakefile.src 24535 2006-06-12 20:26:01Z verhaegs $
include $(TOP)/config/make.cfg

#MM- contrib-cdvdfs: includes linklibs contrib-cdvdfs-module
#MM- contrib-cdvdfs-quick: contrib-cdvdfs-module

TESTSDIR := $(AROS_TESTS)/cdrom

FILES := arosmain cdrom device devsupp generic \
	hfs iso9660 intui path rock volumes \
	joliet prefs charset
CDROM_FILES := main cdrom iso9660 rock joliet \
	hfs generic path charset
CHECKCD_FILES := checkcd cdrom iso9660 rock joliet \
	hfs generic path charset

#Turn these flags on to enable debugging
#USER_CFLAGS := -DAROS_KERNEL -DDEBUG=1

#And these ones are for normal operation
USER_CFLAGS := -DAROS_KERNEL -DNDEBUG -DDEBUG=0


# Define metamake targets and their dependencies
#MM- includes-all : contrib-cdvdfs-includes
#MM contrib-cdvdfs : contrib-cdvdfs-includes core-linklibs
#MM contrib-cdvdfs-kobj : contrib-cdvdfs-includes core-linklibs
#MM contrib-cdvdfs-linklib : contrib-cdvdfs-includes
#MM contrib-cdvdfs-quick : contrib-cdvdfs-includes-quick
#MM contrib-cdvdfs-includes : contrib-cdvdfs-makefile contrib-cdvdfs-includes-dirs \
#MM     includes-generate-deps
#MM contrib-cdvdfs-includes-quick
#MM contrib-cdvdfs-includes-dirs
#MM contrib-cdvdfs-makefile
#MM contrib-cdvdfs-funclist
#MM contrib-cdvdfs-clean

# All MetaMake targets defined by this macro
BD_ALLTARGETS := contrib-cdvdfs contrib-cdvdfs-quick contrib-cdvdfs-includes \
    contrib-cdvdfs-includes-quick contrib-cdvdfs-includes-dirs contrib-cdvdfs-clean \
    contrib-cdvdfs-kobj contrib-cdvdfs-funclist contrib-cdvdfs-linklib

.PHONY : $(BD_ALLTARGETS) contrib-cdvdfs-makefile

ifeq (cdrom,)
$(error using %build_module: modname may not be empty)
endif
ifeq (device,)
$(error using %build_module: $(MODTYPE) has to be defined with the type of the module)
endif

# Default values for variables and arguments
BD_DEFLINKLIBNAME := cdrom
BD_DEFREFFILE := $(OBJDIR)/cdrom_ALL.ref
BD_DEFDFLAGS := $(CFLAGS)
OBJDIR ?= $(GENDIR)/$(CURDIR)

## Create genmodule include Makefile for the module
##
contrib-cdvdfs-makefile : $(OBJDIR)/Makefile.cdrom


TMP_TARGET := Makefile.cdrom
TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifneq (,)
    TMP_OPTS += -c 
    TMP_DEPS += 
else
    TMP_DEPS += cdrom.conf
endif
ifneq (handler,)
    TMP_OPTS += -s handler
endif
ifneq ($(OBJDIR),)
    TMP_OPTS += -d $(OBJDIR)
    TMP_TARGET := $(OBJDIR)/$(TMP_TARGET)
endif

$(TMP_TARGET) : OPTS := $(TMP_OPTS)
$(TMP_TARGET) : MODNAME := cdrom
$(TMP_TARGET) : MODTYPE := device
$(TMP_TARGET) : $(TMP_DEPS)
	@$(GENMODULE) $(OPTS) writemakefile $(MODNAME) $(MODTYPE)

$(OBJDIR)/Makefile.cdrom : | $(OBJDIR)

GLOB_MKDIRS += $(OBJDIR)

# Do not parse these statements if metatarget is not appropriate
ifneq ($(filter $(TARGET),$(BD_ALLTARGETS)),)

include $(OBJDIR)/Makefile.cdrom

BD_DEFMODDIR := $(cdrom_MODDIR)


## include files generation
##
BD_INCDIR    := $(AROSDIR)/$(AROS_DIR_INCLUDE)
ifeq (,yes)
    cdrom_INCLUDES := proto/cdrom.h clib/cdrom_protos.h defines/cdrom.h 
endif
ifeq (,no)
    cdrom_INCLUDES :=
endif
BD_LIBDEFSINC := $(OBJDIR)/cdrom_libdefs.h
BD_DEFLIBDEFSINC := $(OBJDIR)/cdrom_deflibdefs.h

contrib-cdvdfs-includes-quick : contrib-cdvdfs-includes
contrib-cdvdfs-includes : $(addprefix $(GENINCDIR)/,$(cdrom_INCLUDES)) \
    $(addprefix $(BD_INCDIR)/,$(cdrom_INCLUDES)) \
    $(BD_LIBDEFSINC) $(BD_DEFLIBDEFSINC)

ifneq ($(cdrom_INCLUDES),)


ifneq ($(cdrom_INCLUDES),)
TMP_TARGETS := $(cdrom_INCLUDES)

TMP_DEPS := $(GENMODULE)
ifeq ($(cdrom_NEEDREF), yes)
    ifeq ($(BD_DEFREFFILE),)
        $(error reffile needed in rule_genmodule_files but none specified)
    endif
    TMP_OPTS := -r $(BD_DEFREFFILE)
    TMP_DEPS += $(BD_DEFREFFILE)
else
    TMP_OPTS :=
endif
ifneq (,)
    TMP_OPTS += -c 
    TMP_DEPS += 
else
    TMP_DEPS += cdrom.conf
endif
ifneq (handler,)
    TMP_OPTS += -s handler
endif
ifneq ($(OBJDIR)/include,)
    TMP_OPTS += -d $(OBJDIR)/include
    TMP_TARGETS := $(addprefix $(OBJDIR)/include/,$(TMP_TARGETS))
endif

$(TMP_TARGETS) : OPTS := $(TMP_OPTS)
$(TMP_TARGETS) : MODNAME := cdrom
$(TMP_TARGETS) : MODTYPE := device
$(TMP_TARGETS) : $(TMP_DEPS)
	@$(ECHO) "Generating include files"
	@$(GENMODULE) $(OPTS) writeincludes $(MODNAME) $(MODTYPE)
endif


TMP_SRCDIR := $(OBJDIR)/include

$(addprefix $(GENINCDIR)/,$(cdrom_INCLUDES)) : | $(OBJDIR)/cdrom_geninc

$(OBJDIR)/cdrom_geninc : SRCDIR := $(OBJDIR)/include
$(OBJDIR)/cdrom_geninc : TGTDIR := $(GENINCDIR)
$(OBJDIR)/cdrom_geninc : FILES := $(cdrom_INCLUDES)
$(OBJDIR)/cdrom_geninc : $(addprefix $(OBJDIR)/include/,$(cdrom_INCLUDES))
	@for f in $(FILES); do \
	     $(IF) ! $(CMP) -s $(SRCDIR)/$$f $(TGTDIR)/$$f ; then \
	         $(CP) $(SRCDIR)/$$f $(TGTDIR)/$$f ; \
	     fi ; \
	done
	@$(TOUCH) $@


TMP_SRCDIR := $(OBJDIR)/include

$(addprefix $(BD_INCDIR)/,$(cdrom_INCLUDES)) : | $(OBJDIR)/cdrom_incs

$(OBJDIR)/cdrom_incs : SRCDIR := $(OBJDIR)/include
$(OBJDIR)/cdrom_incs : TGTDIR := $(BD_INCDIR)
$(OBJDIR)/cdrom_incs : FILES := $(cdrom_INCLUDES)
$(OBJDIR)/cdrom_incs : $(addprefix $(OBJDIR)/include/,$(cdrom_INCLUDES))
	@for f in $(FILES); do \
	     $(IF) ! $(CMP) -s $(SRCDIR)/$$f $(TGTDIR)/$$f ; then \
	         $(CP) $(SRCDIR)/$$f $(TGTDIR)/$$f ; \
	     fi ; \
	done
	@$(TOUCH) $@


ifneq ($(cdrom_INCLUDES),)
TMP_TARGETS := $(cdrom_INCLUDES)

TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifneq (,)
    TMP_OPTS += -c 
    TMP_DEPS += 
else
    TMP_DEPS += cdrom.conf
endif
ifneq (handler,)
    TMP_OPTS += -s handler
endif
ifneq ($(OBJDIR)/dummyinc,)
    TMP_OPTS += -d $(OBJDIR)/dummyinc
    TMP_TARGETS := $(addprefix $(OBJDIR)/dummyinc/,$(TMP_TARGETS))
endif

$(TMP_TARGETS) : OPTS := $(TMP_OPTS)
$(TMP_TARGETS) : MODNAME := cdrom
$(TMP_TARGETS) : MODTYPE := device
$(TMP_TARGETS) : $(TMP_DEPS)
	@$(ECHO) "Generating dummy include files"
	@$(GENMODULE) $(OPTS) writedummy $(MODNAME) $(MODTYPE)
endif

BD_INCDIRS := $(filter-out ./,$(sort $(dir $(cdrom_INCLUDES))))

TMPcdrom_INCDIRS := \
    $(OBJDIR)/include $(addprefix $(OBJDIR)/include/,$(BD_INCDIRS)) \
    $(GENINCDIR) $(addprefix $(GENINCDIR)/,$(BD_INCDIRS)) \
    $(BD_INCDIR) $(addprefix $(BD_INCDIR)/,$(BD_INCDIRS))

contrib-cdvdfs-includes-dirs :: $(TMPcdrom_INCDIRS)

GLOB_MKDIRS += $(TMPcdrom_INCDIRS)


$(addprefix $(OBJDIR)/dummyinc/,$(cdrom_INCLUDES)) : | $(OBJDIR)/dummyinc $(addprefix $(OBJDIR)/dummyinc/,$(BD_INCDIRS))
GLOB_MKDIRS += $(OBJDIR)/dummyinc $(addprefix $(OBJDIR)/dummyinc/,$(BD_INCDIRS))

endif


TMP_TARGET := cdrom_libdefs.h
TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifneq (,)
    TMP_OPTS += -c 
    TMP_DEPS += 
else
    TMP_DEPS += cdrom.conf
endif
ifneq (handler,)
    TMP_OPTS += -s handler
endif
ifneq ($(OBJDIR),)
    TMP_OPTS += -d $(OBJDIR)
    TMP_TARGET := $(OBJDIR)/$(TMP_TARGET)
endif

$(TMP_TARGET) : OPTS := $(TMP_OPTS)
$(TMP_TARGET) : MODNAME := cdrom
$(TMP_TARGET) : MODTYPE := device
$(TMP_TARGET) : $(TMP_DEPS)
	@$(ECHO) "Generating $(notdir $@)"
	@$(GENMODULE) $(OPTS) writelibdefs $(MODNAME) $(MODTYPE)

BD_LIBDEFSINC := $(OBJDIR)/cdrom_libdefs.h

$(OBJDIR)/cdrom_deflibdefs.h : FILENAME := $(BD_LIBDEFSINC)
$(OBJDIR)/cdrom_deflibdefs.h :
	@$(ECHO) "generating $@"
	@$(ECHO) "#define LC_LIBDEFS_FILE \"$(FILENAME)\"" >$@


## Generation of the funclist file
##
contrib-cdvdfs-funclist : cdrom.funclist


TMP_TARGET := cdrom.funclist
TMP_DEPS := $(GENMODULE)
TMP_OPTS := 
ifeq ($(BD_DEFREFFILE),)
    $(error reffile needed in rule_genmodule_funclist but none specified)
endif
TMP_OPTS := -r $(BD_DEFREFFILE)
TMP_DEPS += $(BD_DEFREFFILE)
ifneq (,)
    TMP_OPTS += -c 
    TMP_DEPS += 
else
    TMP_DEPS += cdrom.conf
endif
ifneq (handler,)
    TMP_OPTS += -s handler
endif
ifneq (,)
    TMP_OPTS += -d 
    TMP_TARGET := /$(TMP_TARGET)
endif

$(TMP_TARGET) : OPTS := $(TMP_OPTS)
$(TMP_TARGET) : MODNAME := cdrom
$(TMP_TARGET) : MODTYPE := device
$(TMP_TARGET) : $(TMP_DEPS)
	@$(ECHO) "Generating $(notdir $@)"
	@$(GENMODULE) $(OPTS) writefunclist $(MODNAME) $(MODTYPE)


## Extra genmodule src files generation
## 

TMP_TARGETS := $(cdrom_STARTFILES) $(cdrom_ENDFILES) \
	       $(cdrom_LINKLIBFILES)
TMP_TARGETS := $(addsuffix .c,$(TMP_TARGETS)) $(addsuffix .S, $(cdrom_LINKLIBAFILES))

TMP_DEPS := $(GENMODULE)
ifeq ($(cdrom_NEEDREF), yes)
    ifeq ($(BD_DEFREFFILE),)
        $(error reffile needed in rule_genmodule_files but none specified)
    endif
    TMP_OPTS := -r $(BD_DEFREFFILE)
    TMP_DEPS += $(BD_DEFREFFILE)
else
    TMP_OPTS :=
endif
ifneq (,)
    TMP_OPTS += -c 
    TMP_DEPS += 
else
    TMP_DEPS += cdrom.conf
endif
ifneq (handler,)
    TMP_OPTS += -s handler
endif
ifneq ($(OBJDIR),)
    TMP_OPTS += -d $(OBJDIR)
    TMP_TARGETS := $(addprefix $(OBJDIR)/,$(TMP_TARGETS))
endif

$(TMP_TARGETS) : OPTS := $(TMP_OPTS)
$(TMP_TARGETS) : MODNAME := cdrom
$(TMP_TARGETS) : MODTYPE := device
$(TMP_TARGETS) : $(TMP_DEPS)
	@$(ECHO) "Generating functable and support files for module $(BD_MODNAME$(BDID))"
ifneq (,lib.conf)
	@$(IF) $(TEST) -f lib.conf; then \
	  $(ECHO) "WARNING !!! $(CURDIR)/lib.conf may probably be removed"; \
	fi
endif
	@$(IF) $(TEST) -f libdefs.h; then \
	  $(ECHO) "WARNING !!! $(CURDIR)/libdefs.h may probably be removed"; \
	fi
	@$(GENMODULE) $(OPTS) writefiles $(MODNAME) $(MODTYPE)

## Compilation
##
BD_FILES      := arosdevice $(FILES)
BD_STARTFILES := $(addprefix $(OBJDIR)/,$(cdrom_STARTFILES))
BD_ENDFILES   := $(addprefix $(OBJDIR)/,$(cdrom_ENDFILES))

BD_ARCHOBJS   := $(wildcard $(OBJDIR)/arch/*.o)
BD_ARCHFILES  := $(basename $(notdir $(BD_ARCHOBJS)))
BD_NARCHFILES := $(filter-out $(BD_ARCHFILES),$(BD_FILES))

BD_CFLAGS     := $(CFLAGS) -I$(OBJDIR) -idirafter $(TOP)/$(CURDIR) -include $(OBJDIR)/cdrom_deflibdefs.h
BD_DFLAGS     := $(BD_DEFDFLAGS) -I$(OBJDIR) -idirafter $(TOP)/$(CURDIR) -include $(OBJDIR)/cdrom_deflibdefs.h

BD_LINKLIBCFILES := $(addprefix $(OBJDIR)/,$(cdrom_LINKLIBFILES))
BD_LINKLIBAFILES := $(addprefix $(OBJDIR)/,$(cdrom_LINKLIBAFILES))
ifeq ($(strip $(cdrom_LINKLIBFILES) ),)
    BD_LINKLIB :=
else
    BD_LINKLIB := $(AROSDIR)/$(AROS_DIR_LIB)/lib$(BD_DEFLINKLIBNAME).a
endif
BD_LINKLIBFILES := $(BD_LINKLIBCFILES) $(BD_LINKLIBAFILES)

BD_CCFILES := $(BD_NARCHFILES) $(BD_STARTFILES) \
    $(BD_ENDFILES) $(BD_LINKLIBCFILES) 


ifeq ($(OBJDIR),)
TMP_TARGETS := $(addsuffix .o,$(BD_CCFILES))
TMP_DTARGETS := $(addsuffix .d,$(BD_CCFILES))
TMP_WILDCARD := %
else
TMP_TARGETS := $(addsuffix .o,$(addprefix $(OBJDIR)/,$(notdir $(BD_CCFILES))))
TMP_DTARGETS := $(addsuffix .d,$(addprefix $(OBJDIR)/,$(notdir $(BD_CCFILES))))
TMP_WILDCARD := $(OBJDIR)/%

# Be sure that all .c files are generated
$(TMP_TARGETS) $(TMP_DTARGETS) : | $(addsuffix .c,$(BD_CCFILES))

# Be sure that all .c files are found
TMP_DIRS := $(filter-out ./,$(sort $(dir $(BD_CCFILES))))
ifneq ($(TMP_DIRS),)
    vpath %.c $(TMP_DIRS)
endif

endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETS) $(TMP_DTARGETS) : CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETS) $(TMP_DTARGETS) : CMD:=$(HOST_CC)
endif

$(TMP_TARGETS) : CFLAGS := $(BD_CFLAGS)
$(TMP_TARGETS) : $(TMP_WILDCARD).o : %.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(CMD) $(CFLAGS) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(CMD) $(CFLAGS) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(CMD) $(CFLAGS) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS),)
$(TMP_DTARGETS) : DFLAGS:=$(BD_CFLAGS)
else
$(TMP_DTARGETS) : DFLAGS:=$(BD_DFLAGS)
endif
$(TMP_DTARGETS) : $(TMP_WILDCARD).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(CMD)" $(MKDEPEND) $(DFLAGS) $< -o $@

ifneq ($(BD_LINKLIBAFILES),)

ifeq ($(OBJDIR),)
TMP_TARGETS := $(addsuffix .o,$(BD_LINKLIBAFILES))
TMP_WILDCARD := %
else
TMP_TARGETS := $(addsuffix .o,$(addprefix $(OBJDIR)/,$(notdir $(BD_LINKLIBAFILES))))
TMP_WILDCARD := $(OBJDIR)/%

# Be sure that all .s files are generated
$(TMP_TARGETS) : | $(addsuffix .S,$(BD_LINKLIBAFILES))

# Be sure that all .c files are found
TMP_DIRS := $(filter-out ./,$(sort $(dir $(BD_LINKLIBAFILES))))
ifneq ($(TMP_DIRS),)
    vpath %.S $(TMP_DIRS)
endif

endif

$(TMP_TARGETS) : AFLAGS := $(AFLAGS)
$(TMP_TARGETS) : $(TMP_WILDCARD).o : %.S
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
endif

## function reference files generation
##

ifeq ($(OBJDIR),)
TMP_TARGETS := $(addsuffix .ref,$(BD_FILES))
TMP_WILDCARD := %.ref
else
TMP_TARGETS := $(addprefix $(OBJDIR)/,$(addsuffix .ref,$(notdir $(BD_FILES))))
TMP_WILDCARD := $(OBJDIR)/%.ref

# Be sure that all .c files are generated
$(TMP_TARGETS) : | $(addsuffix .c,$(BD_FILES))

# Be sure that all .c files are found
TMP_DIRS := $(filter-out ./,$(sort $(dir $(BD_FILES))))
ifneq ($(TMP_DIRS),)
    vpath %.c $(TMP_DIRS)
endif

endif

ifeq ($(filter target,target host),)
$(error use of %rule_ref: compiler has to be 'host' or 'target')
endif

ifeq (target,target)
$(TMP_TARGETS) : CC:=$(TARGET_CC)
else
$(TMP_TARGETS) : CC:=$(HOST_CC)
endif
ifeq (,)
$(TMP_TARGETS) : CFLAGS:=-I$(dir $(GENMODULE))/genmod_inc -I$(OBJDIR)/dummyinc $(strip $(BD_CFLAGS))
else
$(TMP_TARGETS) : CFLAGS:="-I$(dir $(GENMODULE))/genmod_inc -I$(OBJDIR)/dummyinc $(strip $(BD_CFLAGS)) -include "
$(TMP_TARGETS) : 
endif
$(TMP_TARGETS) : $(CXREF)
$(TMP_TARGETS) : $(TMP_WILDCARD) : %.c
	@$(ECHO) "Generating ref for $(notdir $<)..."
	@$(CXREF) -raw -CPP '$(CC) -E -C -dD -D__CXREF__ $(CFLAGS)' $< >$@ 2>$(GENDIR)/cerrors
	@$(IF) $(TEST) -s $@ ; \
	then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
	        $(ECHO) "$<: $(CXREF) -raw -CPP '$(CC) -E -C -dD -D__CXREF__ $(CFLAGS)' $< >$@" >> $(GENDIR)/errors ; \
	        tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    fi ; \
	else \
	    $(ECHO) "Reference generation failed: $(CXREF) -raw -CPP '$(CC) -E -C -dD -D__CXREF__ $(CFLAGS)' $< >$@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    $(RM) $@ ; \
	    exit 1 ; \
	fi

ifeq (,)
BD_REFS   := $(addprefix $(OBJDIR)/,$(addsuffix .ref, $(notdir $(BD_FILES))))
else
BD_REFS   := $(addprefix $(OBJDIR)/,$(addsuffix .ref, $(notdir $(filter-out ,$(BD_FILES)))))
endif


$(BD_DEFREFFILE) : $(BD_REFS)
ifneq (Collecting function references for module cdrom,)
	@$(ECHO) Collecting function references for module cdrom
endif
	@$(CAT) $^ >$@


## Linking
##
ifeq (handler,)
BD_MODULE    := $(AROSDIR)/$(BD_DEFMODDIR)/cdrom.device
BD_KOBJ      := $(KOBJSDIR)/cdrom_device.o
else
BD_MODULE    := $(AROSDIR)/$(BD_DEFMODDIR)/cdrom.handler
BD_KOBJ      := $(KOBJSDIR)/cdrom_handler.o
endif

contrib-cdvdfs-quick : contrib-cdvdfs
contrib-cdvdfs : $(BD_MODULE) $(BD_LINKLIB)
contrib-cdvdfs-kobj : $(BD_KOBJ) $(BD_LINKLIB)
contrib-cdvdfs-linklib : $(BD_LINKLIB)

BD_OBJS       := $(addsuffix .o,$(BD_STARTFILES)) $(BD_ARCHOBJS) \
	     	 $(addsuffix .o, $(addprefix $(OBJDIR)/,$(notdir $(BD_NARCHFILES))))
BD_ENDOBJS    := $(addsuffix .o,$(BD_ENDFILES))
BD_LINKLIBOBJS:= $(addsuffix .o,$(addprefix $(OBJDIR)/,$(notdir )) $(BD_LINKLIBFILES))

# The module is linked from all the compiled .o files

$(BD_MODULE) : OBJS := $(BD_OBJS)
$(BD_MODULE) : ENDTAG := $(BD_ENDOBJS)
$(BD_MODULE) : ERR := $(BD_MODNAME).err
$(BD_MODULE) : LIBS := $(addprefix -l,arossupport rom) -lautoinit -llibinit -L/usr/lib $(addprefix -l,)
$(BD_MODULE) : $(BD_OBJS) $(BD_ENDOBJS) $(addprefix $(LIBDIR)/lib,$(addsuffix .a,arossupport rom libinit autoinit))
	@$(ECHO) "Building $(notdir $@) ..."
	@if $(AROS_CC) $(NOSTARTUP_LDFLAGS) $(LDFLAGS) \
	    $(GENMAP) $(OBJDIR)/$(MODULE).map \
	    $(OBJS) $(LIBS) $(ENDTAG) \
	    -o $@ 2>&1 > $(OBJDIR)/$(ERR); \
	then \
	    cat $(OBJDIR)/$(ERR); \
	else \
	    cat $(OBJDIR)/$(ERR); \
	    exit 1; \
	fi

	@if $(TEST) ! -s $(OBJDIR)/$(ERR) ; then $(RM) $(OBJDIR)/$(ERR) ; fi
	@$(STRIP) $@


# Link static lib
ifneq ($(BD_LINKLIB),)

$(AROSDIR)/$(AROS_DIR_LIB)/lib$(BD_DEFLINKLIBNAME).a : $(BD_LINKLIBOBJS)
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $^
	@$(RANLIB) $@

$(BD_LINKLIB) : | $(AROSDIR)/$(AROS_DIR_LIB)
GLOB_MKDIRS += $(AROSDIR)/$(AROS_DIR_LIB)
endif

# Link kernel object file
BD_KAUTOLIB := workbench dos cybergraphics intuition layers graphics oop utility \
    expansion keymap
BD_KBASE := WorkbenchBase DOSBase CyberGfxBase IntuitionBase LayersBase \
    GfxBase OOPBase UtilityBase ExpansionBase KeymapBase
BD_KLIB := hiddgraphicsstubs hiddstubs amiga arossupport rom arosm autoinit libinit
BD_KOBJ_LIBS := $(filter-out $(BD_KLIB),arossupport rom) $(BD_KAUTOLIB)
$(BD_KOBJ) : LINKLIBS:=$(BD_KOBJ_LIBS)
$(BD_KOBJ) : FILTBASES:=$(addprefix -L ,$(BD_KBASE))
$(BD_KOBJ) : $(BD_OBJS) $(BD_ENDOBJS)
	@$(ECHO) "Linking $@"
	@$(AROS_LD) -Ur -o $@ $^ -L$(AROS_LIB) $(addprefix -l,$(LINKLIBS))
	@$(OBJCOPY) $@ $(FILTBASES) `$(NM_PLAIN) $@ | $(AWK) '($$3 ~ /^__.*_(LIST|END)__$$/) || ($$3 ~ /^libraryset_.*$$/) {print "-L " $$3;}'`

## Dependency fine-tuning
##
BD_DEPS := $(addsuffix .d,$(addprefix $(OBJDIR)/,$(notdir $(BD_CCFILES))))
ifneq ($(BD_DEPS),)
  ifneq (contrib-cdvdfs contrib-cdvdfs-quick contrib-cdvdfs-kobj,)
    ifneq ($(findstring $(TARGET),contrib-cdvdfs contrib-cdvdfs-quick contrib-cdvdfs-kobj),)
      -include $(BD_DEPS)
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS)
    endif
  endif
endif

$(BD_OBJS) $(BD_DEPS) $(BD_REFS) : | $(OBJDIR)
$(BD_MODULE) : | $(AROSDIR)/$(BD_DEFMODDIR)
$(BD_KOBJ) : | $(KOBJSDIR)
GLOB_MKDIRS += $(OBJDIR) $(AROSDIR)/$(BD_DEFMODDIR) $(KOBJSDIR)

# Some include files need to be generated before the .c can be parsed.
ifneq ($(filter $(TARGET),contrib-cdvdfs contrib-cdvdfs-includes contrib-cdvdfs-quick contrib-cdvdfs-kobj),) # Only for this target these deps are wanted
BD_REFFILE_DEPS := $(BD_LIBDEFSINC) $(OBJDIR)/cdrom_deflibdefs.h \
    $(addprefix $(OBJDIR)/dummyinc/,$(cdrom_INCLUDES))
$(BD_REFS) : $(BD_REFFILE_DEPS) $(dir $(GENMODULE))/genmod_inc/aros/libcall.h

BD_DFILE_DEPS := $(BD_LIBDEFSINC) $(OBJDIR)/cdrom_deflibdefs.h \
    $(addprefix $(BD_INCDIR)/,$(cdrom_INCLUDES))
$(BD_DEPS) : $(BD_DFILE_DEPS)
endif

BD_TOCLEAN := $(BD_OBJS) $(BD_DEPS) $(BD_DEFREFFILE) \
    $(BD_REFS) $(BD_MODULE) $(BD_LINKLIB) $(BD_KOBJ) \
    $(addprefix $(GENINCDIR)/,$(cdrom_INCLUDES)) \
    $(addprefix $(BD_INCDIR)/,$(cdrom_INCLUDES)) \
    $(addprefix .c,$(BD_LINKLIBFILES)) $(BD_LINKLIBOBJS) $(BD_LIBDEFSINC) \
    $(OBJDIR)/cdrom_deflibdefs.h \
    $(addsuffix .c,$(BD_STARTFILES) $(BD_ENDFILES)) \
    $(BD_ENDOBJS)
contrib-cdvdfs-clean : FILES := $(BD_TOCLEAN)
contrib-cdvdfs-clean ::
	@$(ECHO) "Cleaning up for module cdrom"
	@$(RM) $(FILES)

endif # $(TARGET) in $(BD_ALLTARGETS)

#MM- contrib-cdvdfs-cdrom: includes linklibs contrib-cdvdfs-cdrom-quick


.PHONY : contrib-cdvdfs-cdrom-quick

BDID := $(BDID)_
ifneq ($(filter $(TARGET),contrib-cdvdfs-cdrom-quick contrib-cdvdfs-cdrom-quick-clean contrib-cdvdfs-cdrom-quick-quick),)
BDTARGETID := $(BDID)
endif

BD_PROGNAME$(BDID)  := cdrom
BD_OBJDIR$(BDID)    := $(GENDIR)/$(CURDIR)
BD_TARGETDIR$(BDID) := $(TESTSDIR)

BD_FILES$(BDID)     := $(CDROM_FILES)
BD_ASMFILES$(BDID)  := 
BD_OBJS$(BDID)      := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(BD_FILES$(BDID)) $(BD_ASMFILES$(BDID))))
BD_DEPS$(BDID)      := $(addsuffix .d,$(addprefix $(BD_OBJDIR$(BDID))/,$(BD_FILES$(BDID))))

BD_CFLAGS$(BDID)    := $(CFLAGS)
BD_AFLAGS$(BDID)    := $(AFLAGS)
BD_DFLAGS$(BDID)    := $(BD_CFLAGS$(BDID))
BD_LDFLAGS$(BDID)   := $(LDFLAGS)

#MM
contrib-cdvdfs-cdrom-quick-quick : contrib-cdvdfs-cdrom-quick

#MM contrib-cdvdfs-cdrom-quick : includes-generate-deps
contrib-cdvdfs-cdrom-quick : $(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID))

ifneq ($(filter $(TARGET),contrib-cdvdfs-cdrom-quick contrib-cdvdfs-cdrom-quick-quick),)

ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := %
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir %)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : %.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(TMP_CMD)" $(MKDEPEND) $(TMP_DFLAGS) $< -o $@

ifeq ($(BD_OBJDIR$(BDID)),)
TMP_TARGETS := $(addsuffix .o,$(BD_ASMFILES$(BDID)))
TMP_WILDCARD := %
else
TMP_TARGETS := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir $(BD_ASMFILES$(BDID)))))
TMP_WILDCARD := $(BD_OBJDIR$(BDID))/%

# Be sure that all .s files are generated
$(TMP_TARGETS) : | $(addsuffix .s,$(BD_ASMFILES$(BDID)))

# Be sure that all .c files are found
TMP_DIRS := $(filter-out ./,$(sort $(dir $(BD_ASMFILES$(BDID)))))
ifneq ($(TMP_DIRS),)
    vpath %.s $(TMP_DIRS)
endif

endif

$(TMP_TARGETS) : AFLAGS := $(BD_AFLAGS$(BDID))
$(TMP_TARGETS) : $(TMP_WILDCARD).o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


TMP_EXTRA_LDFLAGS := 
ifeq (no,yes)
    TMP_EXTRA_LDFLAGS += $(NIX_LDFLAGS)
endif
ifeq (yes,no)
    TMP_EXTRA_LDFLAGS += $(NOSTARTUP_LDFLAGS)
endif
ifeq (no,yes)
    TMP_EXTRA_LDFLAGS += $(DETACH_LDFLAGS)
endif
$(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID)) : EXTRA_LDFLAGS:=$(TMP_EXTRA_LDFLAGS)

$(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID)) : $(BD_OBJS$(BDID)) $(addprefix $(LIBDIR)/lib,$(addsuffix .a,amiga arosc libinit autoinit))
	@$(ECHO) "Linking $@..."
	@$(IF) $(AROS_CC) $(BD_LDFLAGS$(BDID)) $(EXTRA_LDFLAGS) $(BD_OBJS$(BDID)) -o $@ $(addprefix -l,amiga arosc) $(addprefix -l,) 2>&1 > $(GENDIR)/cerrors 2>&1 ; then \
		$(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
				$(ECHO) "$@: $(AROS_CC) $(BD_LDFLAGS$(BDID)) $(EXTRA_LDFLAGS) $(BD_OBJS$(BDID)) -o $@ $(addprefix -l,amiga arosc) $(addprefix -l,)" >> $(GENDIR)/errors ; \
				$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	   	else \
			$(NOP) ; \
    		fi ; \
	else \
	    $(ECHO) "Link failed: $(AROS_CC) $(BD_LDFLAGS$(BDID)) $(EXTRA_LDFLAGS) $(BD_OBJS$(BDID)) -o $@ $(addprefix -l,amiga arosc) $(addprefix -l,)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi; \
	$(STRIP) $@

endif

ifneq ($(BD_DEPS$(BDID)),)
  ifneq (contrib-cdvdfs-cdrom-quick contrib-cdvdfs-cdrom-quick-quick,)
    ifneq ($(findstring $(TARGET),contrib-cdvdfs-cdrom-quick contrib-cdvdfs-cdrom-quick-quick),)
      -include $(BD_DEPS$(BDID))
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS$(BDID))
    endif
  endif
endif

$(BD_OBJS$(BDID)) $(BD_DEPS$(BDID)) : | $(BD_OBJDIR$(BDID))
$(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID)) : | $(BD_TARGETDIR$(BDID))
GLOB_MKDIRS += $(BD_OBJDIR$(BDID)) $(BD_TARGETDIR$(BDID))


#MM- contrib-cdvdfs-checkcd: includes linklibs contrib-cdvdfs-checkcd-quick


.PHONY : contrib-cdvdfs-checkcd-quick

BDID := $(BDID)_
ifneq ($(filter $(TARGET),contrib-cdvdfs-checkcd-quick contrib-cdvdfs-checkcd-quick-clean contrib-cdvdfs-checkcd-quick-quick),)
BDTARGETID := $(BDID)
endif

BD_PROGNAME$(BDID)  := checkcd
BD_OBJDIR$(BDID)    := $(GENDIR)/$(CURDIR)
BD_TARGETDIR$(BDID) := $(AROS_C)

BD_FILES$(BDID)     := $(CHECKCD_FILES)
BD_ASMFILES$(BDID)  := 
BD_OBJS$(BDID)      := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(BD_FILES$(BDID)) $(BD_ASMFILES$(BDID))))
BD_DEPS$(BDID)      := $(addsuffix .d,$(addprefix $(BD_OBJDIR$(BDID))/,$(BD_FILES$(BDID))))

BD_CFLAGS$(BDID)    := $(CFLAGS)
BD_AFLAGS$(BDID)    := $(AFLAGS)
BD_DFLAGS$(BDID)    := $(BD_CFLAGS$(BDID))
BD_LDFLAGS$(BDID)   := $(LDFLAGS)

#MM
contrib-cdvdfs-checkcd-quick-quick : contrib-cdvdfs-checkcd-quick

#MM contrib-cdvdfs-checkcd-quick : includes-generate-deps
contrib-cdvdfs-checkcd-quick : $(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID))

ifneq ($(filter $(TARGET),contrib-cdvdfs-checkcd-quick contrib-cdvdfs-checkcd-quick-quick),)

ifeq ($(BD_OBJDIR$(BDID)),)
  TMP_TARGETBASE := %
else
  TMP_TARGETBASE := $(BD_OBJDIR$(BDID))/$(notdir %)
endif

ifeq ($(findstring target,host target),)
  $(error unknown compiler target)
endif
ifeq (target,target)
$(TMP_TARGETBASE).o : TMP_CMD:=$(TARGET_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(TARGET_CC)
endif
ifeq (target,host)
$(TMP_TARGETBASE).o : TMP_CMD:=$(HOST_CC)
$(TMP_TARGETBASE).d : TMP_CMD:=$(HOST_CC)
endif

$(TMP_TARGETBASE).o : %.c
	@$(ECHO) "Compiling $(notdir $<)"
	@$(IF) $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$<: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" >> $(GENDIR)/errors ; \
		tee < $(GENDIR)/cerrors -a $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: $(TMP_CMD) $(BD_CFLAGS$(BDID)) -c $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi

ifeq ($(BD_DFLAGS$(BDID)),)
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_CFLAGS$(BDID))
else
$(TMP_TARGETBASE).d : TMP_DFLAGS:=$(BD_DFLAGS$(BDID))
endif
$(TMP_TARGETBASE).d : %.c
	@$(IF) $(TEST) ! -d $(dir $@) ; then $(MKDIR) $(dir $@) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$(notdir $<)..."
	@AROS_CC="$(TMP_CMD)" $(MKDEPEND) $(TMP_DFLAGS) $< -o $@

ifeq ($(BD_OBJDIR$(BDID)),)
TMP_TARGETS := $(addsuffix .o,$(BD_ASMFILES$(BDID)))
TMP_WILDCARD := %
else
TMP_TARGETS := $(addsuffix .o,$(addprefix $(BD_OBJDIR$(BDID))/,$(notdir $(BD_ASMFILES$(BDID)))))
TMP_WILDCARD := $(BD_OBJDIR$(BDID))/%

# Be sure that all .s files are generated
$(TMP_TARGETS) : | $(addsuffix .s,$(BD_ASMFILES$(BDID)))

# Be sure that all .c files are found
TMP_DIRS := $(filter-out ./,$(sort $(dir $(BD_ASMFILES$(BDID)))))
ifneq ($(TMP_DIRS),)
    vpath %.s $(TMP_DIRS)
endif

endif

$(TMP_TARGETS) : AFLAGS := $(BD_AFLAGS$(BDID))
$(TMP_TARGETS) : $(TMP_WILDCARD).o : %.s
	@$(ECHO) "Assembling $(notdir $<)..."
	@$(IF) $(CC) $(AFLAGS) $< -o $@ > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "$(notdir $<): $(CC) $(AFLAGS) $< -o $@" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: $(CC) $(AFLAGS) $< -o $@" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi


TMP_EXTRA_LDFLAGS := 
ifeq (no,yes)
    TMP_EXTRA_LDFLAGS += $(NIX_LDFLAGS)
endif
ifeq (yes,no)
    TMP_EXTRA_LDFLAGS += $(NOSTARTUP_LDFLAGS)
endif
ifeq (no,yes)
    TMP_EXTRA_LDFLAGS += $(DETACH_LDFLAGS)
endif
$(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID)) : EXTRA_LDFLAGS:=$(TMP_EXTRA_LDFLAGS)

$(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID)) : $(BD_OBJS$(BDID)) $(addprefix $(LIBDIR)/lib,$(addsuffix .a,amiga arosc libinit autoinit))
	@$(ECHO) "Linking $@..."
	@$(IF) $(AROS_CC) $(BD_LDFLAGS$(BDID)) $(EXTRA_LDFLAGS) $(BD_OBJS$(BDID)) -o $@ $(addprefix -l,amiga arosc) $(addprefix -l,) 2>&1 > $(GENDIR)/cerrors 2>&1 ; then \
		$(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
				$(ECHO) "$@: $(AROS_CC) $(BD_LDFLAGS$(BDID)) $(EXTRA_LDFLAGS) $(BD_OBJS$(BDID)) -o $@ $(addprefix -l,amiga arosc) $(addprefix -l,)" >> $(GENDIR)/errors ; \
				$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	   	else \
			$(NOP) ; \
    		fi ; \
	else \
	    $(ECHO) "Link failed: $(AROS_CC) $(BD_LDFLAGS$(BDID)) $(EXTRA_LDFLAGS) $(BD_OBJS$(BDID)) -o $@ $(addprefix -l,amiga arosc) $(addprefix -l,)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi; \
	$(STRIP) $@

endif

ifneq ($(BD_DEPS$(BDID)),)
  ifneq (contrib-cdvdfs-checkcd-quick contrib-cdvdfs-checkcd-quick-quick,)
    ifneq ($(findstring $(TARGET),contrib-cdvdfs-checkcd-quick contrib-cdvdfs-checkcd-quick-quick),)
      -include $(BD_DEPS$(BDID))
    endif
  else
    ifeq (,$(filter clean% %clean %clean% setup% includes% %setup,$(TARGET)))
      -include $(BD_DEPS$(BDID))
    endif
  endif
endif

$(BD_OBJS$(BDID)) $(BD_DEPS$(BDID)) : | $(BD_OBJDIR$(BDID))
$(BD_TARGETDIR$(BDID))/$(BD_PROGNAME$(BDID)) : | $(BD_TARGETDIR$(BDID))
GLOB_MKDIRS += $(BD_OBJDIR$(BDID)) $(BD_TARGETDIR$(BDID))


# Delete generated makefiles
#MM
clean ::
	@$(RM) $(TOP)/$(CURDIR)/mmakefile $(TOP)/$(CURDIR)/mmakefile.bak

include $(TOP)/config/make.tail

BDID := $(BDTARGETID)
